#!/usr/bin/env php
<?php
/* From Phinx
 *
 * (The MIT license)
 * Copyright (c) 2014 Rob Morgan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated * documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

use Application\Console\ConsoleApplication;
use Application\Console\DICommandLoader;
use Composer\InstalledVersions;
use Doctrine\Migrations\Configuration\EntityManager\ManagerRegistryEntityManager;
use Doctrine\Migrations\Configuration\Migration\PhpFile;
use Doctrine\Migrations\DependencyFactory;
use Doctrine\Migrations\Tools\Console\ConsoleRunner as ConsoleMigrationsRunner;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Tools\Console\ConsoleRunner;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Dotenv\Dotenv;

return (static function (): int {
    $autoloadFiles = [
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/../../../autoload.php',
    ];

    $autoloaderFound = false;
    foreach ($autoloadFiles as $autoloadFile) {
        if (!file_exists($autoloadFile)) {
            continue;
        }

        require_once $autoloadFile;
        $autoloaderFound = true;
    }

    if (!$autoloaderFound) {
        if (extension_loaded('phar') && Phar::running() !== '') {
            fwrite(STDERR, 'The PHAR was built without dependencies!' . PHP_EOL);
            exit(1);
        }

        fwrite(STDERR, 'vendor/autoload.php could not be found. Did you run `composer install`?' . PHP_EOL);
        exit(1);
    }

    $basePath = dirname(__DIR__, 4);

    $bootstrapFile = $basePath . '/app/Bootstrap/Bootstrap.php';

    if (!file_exists($bootstrapFile)) {
        fwrite(STDERR, 'app/Bootstrap/Bootstrap.php could not be found' . PHP_EOL);
        exit(1);
    }

    $app = require $bootstrapFile;

    if (file_exists($basePath . '/.env') && class_exists(Dotenv::class)) {
        $dotenv = new Dotenv();
        $dotenv->loadEnv($basePath . '/.env');
    }

    $config[] = dirname(__DIR__) . '/config/config.php';
    if (file_exists($basePath . '/config/database.php')) {
        $config[] = $basePath . '/config/database.php';
    } else {
        $config[] = dirname(__DIR__) . '/config/database.php';
    }

    $version = InstalledVersions::getVersion('willy68/pgconsole');
    $console = new ConsoleApplication($config, $basePath, 'PgConsole', $version);
    $console->setCatchExceptions(false);

    $c = $app->getContainer();

// ORM commands
    if ($c->has(EntityManagerInterface::class)) {
        $helperSet = ConsoleRunner::createHelperSet($c->get(EntityManagerInterface::class));
        $console->setHelperSet($helperSet);
        ConsoleRunner::addCommands($console);
    }

// Migrations commands
    if ($c->has(ManagerRegistry::class)) {
        $configurations = new PhpFile(getcwd() . DIRECTORY_SEPARATOR . 'migrations.php');
        $Manager = $c->get(ManagerRegistry::class);

        $dependencyFactory = DependencyFactory::fromEntityManager(
            $configurations,
            ManagerRegistryEntityManager::withSimpleDefault($Manager, 'default')
        );
        ConsoleMigrationsRunner::addCommands($console, $dependencyFactory);
    }

// PgConsole commands
    $console->setCommandLoader(DICommandLoader::getDICommandLoader($c, $c->get('console.commands')));

    return $console->run();

})();
